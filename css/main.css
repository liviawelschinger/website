:root{
    --overlay-color: rgba(225,225, 225, 0.9);
    --menu-speed: 0.75s;
}

/** {
    box-sizing: border-box;
    margin: 0;
    padding: 0;

}*/

/*
body {
    font-family: 'Roboto', sans-serif;
    line-height: 1.4;
}

.container {
    max-width: 960px;
    margin: auto;
    overflow: hidden;
    padding: 0 3rem;

}

.showcase{
    background-color: var(--primary-color);
    color: #fff;
    height: 100vh;
    /*
    because overflow is absolute positioned

    position: relative;
}
 */


/*.showcase:before{
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
}

showcase .showcase-inner{
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
    height: 100%;
}
*!*/







html {
    height: 100%;
    width: 100%;
   /* font-family: circular std, sans-serif; */
    font-family: railway , sans-serif;
}


body {
    /*
        no space between rows and browser window
     */
    margin: 0;
    width: 100vw;
    height: 100vh;

    /*
    This automatically changes the direct children of body to grid items.
    */
    display: grid;
    /*
        get the footer pushed down to the end of the page
        min-content: My first (aka header) row and last row (aka footer) will take up the minimum space they need.
        auto: My second row (aka main) will take up the remainder of the parent container’s height.
     */
    grid-template-rows: min-content auto min-content ;
    grid-template-columns: 100%;

}

header ul {
    background-color: lightgray;
    display: grid;
    /*
        This creates 4 columns, each with a width of the minimum space they need.
     */
    grid-template-columns: repeat(4, min-content);
    /*
        space out the navigation items along the inline axis (row) of the grid container.
     */
    justify-content: space-evenly;
}

@media only screen and (max-width: 600px) {
    header ul {
        grid-template-columns: none;
    }
}


/*ul,
li {
    margin: 0;
    padding: 0;
}*/

/*li {
    display: inline-block;
    padding: 10px;
}*/

/*.nav {
    height: 80px;
    display: flex;
    align-items: center;
    text-align: right;
}*/

.grid-wrapper {
    /*changed the height from 100% to auto as the layout breaks when the height of the content 'overflows'*/
    height: auto;
    margin-top: 15vh;
    display: grid;
    grid-template-rows: min-content auto min-content;
}

main {
    display: grid;
    grid-template-rows: min-content min-content;
    justify-content: center;
    align-content: center;
}

.child-grid {
    display: grid;
    width: 80vw;
    /*border: 1px black solid;*/
    margin: 5px;
    padding: 10px;
}

h1 {
    font-size: 40px;
    font-weight: 400;
    color: black;
}


p {
    color: black;
    font-weight: 100;
    font-size: 20px;
    margin-top: 25px;
}

.violet {
    color: #6D55D6;
}


#img_programmer {
    width: 500px;
    height: 250px;
}

.flex-wrapper{
    display: flex;
    margin: 0px;
  /* border-color: black;
    border-style: solid;
    border-width: 2px;*/

}

/* https://www.w3schools.com/howto/howto_css_cards.asp*/
.card {
    /*flex-grow: 1;
    text-align: center;
    margin: 5px;
    border-color: grey;
    border-style: outset;
    border-width: 2px;*/
    /* Add shadows to create the "card" effect */
    height: 250px;
    flex-grow: 1;
    text-align: center;
    margin: 5px;
    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
    transition: 0.3s;
    border-radius: 5px; /* 5px rounded corners */

}


.flex-item {
    flex-grow: 1;
    text-align: center;
    margin: 0px;
   /* border-color: grey;
    border-style: solid;
    border-width: 1px;*/

}

#flex-item-home{
    text-align: left;
}

ul {list-style: none}

.card li::before {content: "•"; color: #6D55D6; display: inline-block; width: 1em;
    margin-left: -1em}

span {
    font-weight: bold;
}



footer {
    background-color: lightgray;
    padding: 10px;
}


@media only screen and (max-width: 850px) {

    /*changes to code to arrange aside below article. */
    .grid-wrapper {
        display: flex;
        flex-direction: column;
    }

    footer {
        order: 2;
    }

    /*end of changes*/

    .flex-wrapper {
        flex-direction: column;
    }

}




